{
  "version": 3,
  "sources": ["../../../../../../code/neighbourhood-watch-app/netlify/functions/utils/cors.js", "../../../../../../code/neighbourhood-watch-app/netlify/functions/health.js"],
  "sourceRoot": "C:/Users/Sean/AppData/Local/Temp/tmp-5416-JO30S4mkgxsv",
  "sourcesContent": ["// CORS utility for Netlify Functions\r\nconst corsHeaders = {\r\n  'Access-Control-Allow-Origin': '*',\r\n  'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With, Accept, Origin',\r\n  'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS, PATCH',\r\n  'Access-Control-Allow-Credentials': 'true',\r\n  'Access-Control-Max-Age': '86400', // 24 hours\r\n};\r\n\r\nconst handleCors = (event) => {\r\n  // Handle preflight OPTIONS request\r\n  if (event.httpMethod === 'OPTIONS') {\r\n    return {\r\n      statusCode: 200,\r\n      headers: corsHeaders,\r\n      body: '',\r\n    };\r\n  }\r\n  return null;\r\n};\r\n\r\nconst createResponse = (statusCode, body, additionalHeaders = {}) => {\r\n  return {\r\n    statusCode,\r\n    headers: {\r\n      ...corsHeaders,\r\n      'Content-Type': 'application/json',\r\n      ...additionalHeaders,\r\n    },\r\n    body: typeof body === 'string' ? body : JSON.stringify(body),\r\n  };\r\n};\r\n\r\nmodule.exports = {\r\n  corsHeaders,\r\n  handleCors,\r\n  createResponse,\r\n};", "// Netlify Function: Health Check\r\nconst { handleCors, createResponse } = require('./utils/cors');\r\n\r\nexports.handler = async (event, context) => {\r\n  // Handle CORS preflight\r\n  const corsResponse = handleCors(event);\r\n  if (corsResponse) return corsResponse;\r\n\r\n  // Only allow GET method\r\n  if (event.httpMethod !== 'GET') {\r\n    return createResponse(405, { error: 'Method not allowed' });\r\n  }\r\n\r\n  try {\r\n    return createResponse(200, {\r\n      status: 'ok',\r\n      timestamp: new Date().toISOString(),\r\n      uptime: process.uptime(),\r\n      environment: process.env.NODE_ENV || 'development',\r\n      platform: 'netlify-functions',\r\n      version: '1.0.0',\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Health check error:', error);\r\n    return createResponse(500, { \r\n      error: 'Internal server error' \r\n    });\r\n  }\r\n};"],
  "mappings": ";;;;;;AAAA;AAAA,oCAAAA,UAAAC,SAAA;AACA,QAAM,cAAc;AAAA,MAClB,+BAA+B;AAAA,MAC/B,gCAAgC;AAAA,MAChC,gCAAgC;AAAA,MAChC,oCAAoC;AAAA,MACpC,0BAA0B;AAAA;AAAA,IAC5B;AAEA,QAAMC,cAAa,CAAC,UAAU;AAE5B,UAAI,MAAM,eAAe,WAAW;AAClC,eAAO;AAAA,UACL,YAAY;AAAA,UACZ,SAAS;AAAA,UACT,MAAM;AAAA,QACR;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAEA,QAAMC,kBAAiB,CAAC,YAAY,MAAM,oBAAoB,CAAC,MAAM;AACnE,aAAO;AAAA,QACL;AAAA,QACA,SAAS;AAAA,UACP,GAAG;AAAA,UACH,gBAAgB;AAAA,UAChB,GAAG;AAAA,QACL;AAAA,QACA,MAAM,OAAO,SAAS,WAAW,OAAO,KAAK,UAAU,IAAI;AAAA,MAC7D;AAAA,IACF;AAEA,IAAAF,QAAO,UAAU;AAAA,MACf;AAAA,MACA,YAAAC;AAAA,MACA,gBAAAC;AAAA,IACF;AAAA;AAAA;;;ACpCA,IAAM,EAAE,YAAY,eAAe,IAAI;AAEvC,QAAQ,UAAU,OAAO,OAAO,YAAY;AAE1C,QAAM,eAAe,WAAW,KAAK;AACrC,MAAI,aAAc,QAAO;AAGzB,MAAI,MAAM,eAAe,OAAO;AAC9B,WAAO,eAAe,KAAK,EAAE,OAAO,qBAAqB,CAAC;AAAA,EAC5D;AAEA,MAAI;AACF,WAAO,eAAe,KAAK;AAAA,MACzB,QAAQ;AAAA,MACR,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,QAAQ,QAAQ,OAAO;AAAA,MACvB,aAAa,QAAQ,IAAI,YAAY;AAAA,MACrC,UAAU;AAAA,MACV,SAAS;AAAA,IACX,CAAC;AAAA,EAEH,SAAS,OAAO;AACd,YAAQ,MAAM,uBAAuB,KAAK;AAC1C,WAAO,eAAe,KAAK;AAAA,MACzB,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AACF;",
  "names": ["exports", "module", "handleCors", "createResponse"]
}
